<!DOCTYPE html>
<html>
<head>
<script>
function f(i, p, u, ks) {
    return (u - ks[i]) / (ks[i + p] - ks[i]);
}

function g(i, p, u, ks) {
    return (ks[i + p] - u) / (ks[i + p] - ks[i]);
}

function n(i, p, u, ks) {
    if (p == 0) {
        if (ks[i] <= u && u < ks[i + 1]) {
            return 1;
        }
        return 0;
    }
    return f(i, p, u, ks) * n(i, p - 1, u, ks) + g(i + 1, p, u, ks) * n(i + 1, p - 1, u, ks);
}

function c(p, u, ks, ps, ws) {
    var numerator = 0;
    var denominator = 0;
    for (var i = 0; i < ps.length; ++i) {
        var coefficient = n(i, p, u, ks) * ws[i];
        numerator += coefficient * ps[i];
        denominator += coefficient;
    }
    return numerator / denominator;
}

function generatePaths(i, p, ks) {
    var result = "";
    for (var u = ks[0]; u <= ks[ks.length - 1]; ++u) {
        result += "L " + u + " " + 300 * n(i, p, u, ks) + " ";
    }
    return "M" + result.substring(1);
}

function generatePath(p, ks, ps_, ps, ws) {
    var result = "";
    for (var u = ks[3]; u <= ks[ks.length - 4]; u+=seg) {
        result += "L " + c(p, u, ks, ps_, ws) + " " + c(p, u, ks, ps, ws) + " ";
    }
    return "M" + result.substring(1);
}

var w = 3;
var seg = 0.125;
var diffs = [];
var avg = 0;

var degree = 3;
var knots = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200];
var count = knots.length - degree - 1;
var points = [100, 350, 450, 200, 250, 300, 100, 350, 450];
var points_ = [50, 100, 200, 600, 500, 400, 50, 100, 200];
var weights = [100, 5, 5, 100, 5, 5, 1, 1, 1];

function randomHexColor() {
    var result = Math.floor(Math.random() * 200).toString(16);
    while (result.length < 2) {
        result = "0" + result;
    }
    return result;
}

function angle(cx, cy, ex, ey) {
  var dy = ey - cy;
  var dx = ex - cx;
  var theta = Math.atan2(dy, dx); // range (-PI, PI]
  theta *= 180 / Math.PI; // rads to degs, range (-180, 180]
  if (theta < 0) theta = 360 + theta; // range [0, 360)
  return theta;
}

function update() {
    diffs = [];
    knots = [];
    points_ = [];
    points = [];

    var data = document.getElementById("data").value.slice(1,-1).split("L");
    count = data.length;
    avg = 0;

    for (var i = 0; i < data.length+degree+1; i++) {
      if (i < data.length) {
        data[i] = data[i].trim().split(" ");
        data[i][0] = parseInt(data[i][0]);
        data[i][1] = parseInt(data[i][1]);
        points_[i] = data[i][0] * 4;
        points[i] = data[i][1] * 4;
      }
      knots[i] = i;
    }
    for (var i = 0; i < data.length; i++) {

        var x = 0;
		  var y = 0;
        var xold = 0;
        var yold = 0;
        for (var k=i-1; k<=i+1; k+=2) {
          if (k == i-1) {
		      if (k>=0 && k<data.length) {
				  x = data[k][0];
				  y = data[k][1];
			   } else if (k<0) {
				  x = data[data.length+k][0];
				  y = data[data.length+k][1];
			   } else if (k>=data.length) {
				  x = data[k-data.length][0];
				  y = data[k-data.length][1];
			   }
          } else {
            if (k>=0 && k<data.length) {
				  xold = data[k][0];
				  yold = data[k][1];
			   } else if (k<0) {
				  xold = data[data.length+k][0];
				  yold = data[data.length+k][1];
			   } else if (k>=data.length) {
				  xold = data[k-data.length][0];
				  yold = data[k-data.length][1];
			   }
          }
		  }
		  diffs[i] = Math.abs(angle(data[i][0], data[i][1], xold, yold) - angle(data[i][0], data[i][1], x, y))-180;  //Math.sqrt( Math.pow((data[i][0] - x), 2) + Math.pow((data[i][1] - y), 2) );
        
        avg += diffs[i];
        if (Math.abs(diffs[i]) >= 90) {
          weights[i] = 1000;
        } else {
          weights[i] = Math.abs(diffs[i]);

          if (i>0 && i<data.length-1) {
            var dist_ = Math.sqrt( Math.pow((data[i][0] - data[i-1][0]), 2) + Math.pow((data[i][1] - data[i-1][1]), 2) );
            var dist = Math.sqrt( Math.pow((data[i][0] - data[i+1][0]), 2) + Math.pow((data[i][1] - data[i+1][1]), 2) );

            if (Math.abs(diffs[i]) <= 45 && (dist_ <= Math.sqrt(2) && dist <= Math.sqrt(2))) {
              //weights[i] = 8;
              
            }
          }
        }
    }
    avg /= diffs.length;

    var controls = document.getElementById("controls");
    while (controls.childNodes.length < knots.length-2) {
        var wrapper = document.createElement("div");
        var control = document.createElement("input");
        wrapper.appendChild(control);
        control.setAttribute("type", "range");
        control.setAttribute("min", "0");
        control.setAttribute("max", "1000");
        control.setAttribute("value", knots[controls.childNodes.length].toString());
        control.setAttribute("step", "any");
        control.style.width = "1000px";
        control.addEventListener("input", update);
        controls.appendChild(wrapper);
    }
    while (controls.childNodes.length > knots.length-2) {
        controls.removeChild(controls.childNodes[controls.childNodes.length - 1]);
    }
    for (var i = 1; i < knots.length-1; ++i) {
        knots[i] = controls.childNodes[i-1].childNodes[0].valueAsNumber-300;
    }

    var coefficients_ = document.getElementById("coefficients_");
    while (coefficients_.childNodes.length < points_.length-3) {
        var control = document.createElement("input");
        control.setAttribute("type", "range");
        control.setAttribute("min", "0");
        control.setAttribute("max", "1000");
        control.setAttribute("value", points_[coefficients_.childNodes.length].toString());
        control.setAttribute("step", "any");
        control.style.height = "20px";
        control.style.width = "100%";
        //control.style.webkitAppearance = "slider-vertical";
        control.addEventListener("input", update);
        coefficients_.appendChild(control);
    }
    while (coefficients_.childNodes.length > points_.length-3) {
        coefficients_.removeChild(coefficients_.childNodes[coefficients_.childNodes.length - 1]);
    }
    for (var i = 0; i < points_.length; ++i) {
        if (coefficients_.childNodes[i]) {
          points_[i] = coefficients_.childNodes[i].valueAsNumber;
        } else {
          points_[i] = coefficients_.childNodes[i-points_.length+3].valueAsNumber;
        }
    }

    var coefficients = document.getElementById("coefficients");
    while (coefficients.childNodes.length < points.length-3) {
        var control = document.createElement("input");
        control.setAttribute("type", "range");
        control.setAttribute("min", "0");
        control.setAttribute("max", "1000");
        control.setAttribute("value", points[coefficients.childNodes.length].toString());
        control.setAttribute("step", "any");
        control.style.height = "20px";
        control.style.width = "100%";
        //control.style.webkitAppearance = "slider-vertical";
        control.addEventListener("input", update);
        coefficients.appendChild(control);
    }
    while (coefficients.childNodes.length > points.length-3) {
        coefficients.removeChild(coefficients.childNodes[coefficients.childNodes.length - 1]);
    }
    for (var i = 0; i < points.length; ++i) {
        if (coefficients.childNodes[i]) {
          points[i] = coefficients.childNodes[i].valueAsNumber;
        } else {
          points[i] = coefficients.childNodes[i-points.length+3].valueAsNumber;
        }
    }

    var weightElements = document.getElementById("weights");
    while (weightElements.childNodes.length < weights.length-3) {
        var control = document.createElement("input");
        control.setAttribute("type", "range");
        control.setAttribute("min", "0");
        control.setAttribute("max", "1000");
        control.setAttribute("value", weights[weightElements.childNodes.length].toString());
        control.setAttribute("step", "any");
        control.style.height = "20px";
        control.style.width = "100%";
        //control.style.webkitAppearance = "slider-vertical";
        control.addEventListener("input", update);
        weightElements.appendChild(control);
    }
    while (weightElements.childNodes.length > weights.length-3) {
        weightElements.removeChild(weightElements.childNodes[weightElements.childNodes.length - 1]);
    }
    for (var i = 0; i < weights.length; ++i) {
        if (weightElements.childNodes[i]) {
          weights[i] = weightElements.childNodes[i].valueAsNumber;
        } else {
          weights[i] = weightElements.childNodes[i-weights.length+3].valueAsNumber;
        }
    }

    var graphs = document.getElementById("graphs");
    while (graphs.hasChildNodes()) {
        graphs.removeChild(graphs.childNodes[0]);
    }

    for (var i = 0; i < count; ++i) {
        var graph = document.createElementNS("http://www.w3.org/2000/svg", "path");
        graph.setAttribute("fill", "none");
        graph.setAttribute("stroke", "#" + randomHexColor() + randomHexColor() + randomHexColor());
        graph.setAttribute("stroke-width", "1px");
        graph.setAttribute("d", generatePaths(i, degree, knots));
        graphs.appendChild(graph);
    }
    for (var i = 0; i < weights.length; ++i) {
        var graph = document.createElementNS("http://www.w3.org/2000/svg", "circle");
        graph.setAttribute("fill", "black");
        graph.setAttribute("stroke", "none");
        graph.setAttribute("stroke-width", "0");
        graph.setAttribute("r", 0.25);
        graph.setAttribute("cx", points_[i]);
        graph.setAttribute("cy", points[i]);
        graphs.appendChild(graph);
    }
    var graph = document.createElementNS("http://www.w3.org/2000/svg", "path");
    graph.setAttribute("fill", "none");
    graph.setAttribute("stroke", "#eeeeee");
    graph.setAttribute("stroke-width", "0.125px");
    graph.setAttribute("d", generatePath(1, knots, points_, points, weights));
    graphs.appendChild(graph);

    var graph = document.createElementNS("http://www.w3.org/2000/svg", "path");
    graph.setAttribute("fill", "none");
    graph.setAttribute("stroke", "#" + randomHexColor() + randomHexColor() + randomHexColor());
    graph.setAttribute("stroke-width", "0.125px");
    graph.setAttribute("d", generatePath(degree, knots, points_, points, weights));
    graphs.appendChild(graph);
}
</script>
</head>
<body onload="update();">
<textarea cols="100" rows="25" id="data">M142 81 L143 85 L137 89 L141 92 L138 94 L136 91 L124 103 L123 106 L125 108 L125 113 L121 118 L116 117 L120 113 L119 109 L110 119 L106 116 L106 138 L101 143 L95 143 L89 140 L81 130 L83 121 L87 117 L92 117 L93 118 L88 123 L91 132 L96 126 L99 129 L99 116 L103 106 L110 100 L116 100 L119 102 L131 91 L129 87 L130 85 L133 88 L138 81 Z</textarea>

<!--
M137 82 L138 81 L142 81 L143 82 L142 83 L142 84 L143 85 L142 86 L140 86 L140 87 L139 88 L138 88 L137 89 L138 90 L139 90 L141 92 L139 94 L138 94 L137 93 L137 92 L136 91 L124 103 L124 104 L123 105 L123 106 L125 108 L125 113 L124 114 L124 115 L121 118 L117 118 L116 117 L117 116 L118 116 L119 115 L119 114 L120 113 L120 110 L119 109 L113 115 L113 116 L110 119 L109 119 L106 116 L106 123 L107 124 L107 135 L106 136 L106 138 L101 143 L95 143 L94 142 L93 142 L92 141 L91 141 L90 140 L89 140 L83 134 L83 133 L82 132 L82 131 L81 130 L81 126 L82 125 L82 123 L83 122 L83 121 L87 117 L92 117 L93 118 L88 123 L88 126 L90 128 L90 129 L91 130 L91 132 L92 132 L92 131 L93 130 L93 129 L96 126 L99 129 L99 116 L100 115 L100 112 L101 111 L101 110 L102 109 L102 108 L103 107 L103 106 L108 101 L109 101 L110 100 L116 100 L117 101 L118 101 L119 102 L125 96 L126 96 L131 91 L131 89 L129 87 L129 86 L130 85 L131 85 L132 86 L132 87 L133 88 L137 84 Z

M137 82 L138 81 L139 81 L140 81 L141 81 L142 81 L143 82 L142 83 L142 84 L143 85 L142 86 L141 86 L140 86 L140 87 L139 88 L138 88 L137 89 L138 90 L139 90 L140 91 L141 92 L140 93 L139 94 L138 94 L137 93 L137 92 L136 91 L135 92 L134 93 L133 94 L132 95 L131 96 L130 97 L129 98 L128 99 L127 100 L126 101 L125 102 L124 103 L124 104 L123 105 L123 106 L124 107 L125 108 L125 109 L125 110 L125 111 L125 112 L125 113 L124 114 L124 115 L123 116 L122 117 L121 118 L120 118 L119 118 L118 118 L117 118 L116 117 L117 116 L118 116 L119 115 L119 114 L120 113 L120 112 L120 111 L120 110 L119 109 L118 110 L117 111 L116 112 L115 113 L114 114 L113 115 L113 116 L112 117 L111 118 L110 119 L109 119 L108 118 L107 117 L106 116 L106 117 L106 118 L106 119 L106 120 L106 121 L106 122 L106 123 L107 124 L107 125 L107 126 L107 127 L107 128 L107 129 L107 130 L107 131 L107 132 L107 133 L107 134 L107 135 L106 136 L106 137 L106 138 L105 139 L104 140 L103 141 L102 142 L101 143 L100 143 L99 143 L98 143 L97 143 L96 143 L95 143 L94 142 L93 142 L92 141 L91 141 L90 140 L89 140 L88 139 L87 138 L86 137 L85 136 L84 135 L83 134 L83 133 L82 132 L82 131 L81 130 L81 129 L81 128 L81 127 L81 126 L82 125 L82 124 L82 123 L83 122 L83 121 L84 120 L85 119 L86 118 L87 117 L88 117 L89 117 L90 117 L91 117 L92 117 L93 118 L92 119 L91 120 L90 121 L89 122 L88 123 L88 124 L88 125 L88 126 L89 127 L90 128 L90 129 L91 130 L91 131 L91 132 L92 132 L92 131 L93 130 L93 129 L94 128 L95 127 L96 126 L97 127 L98 128 L99 129 L99 128 L99 127 L99 126 L99 125 L99 124 L99 123 L99 122 L99 121 L99 120 L99 119 L99 118 L99 117 L99 116 L100 115 L100 114 L100 113 L100 112 L101 111 L101 110 L102 109 L102 108 L103 107 L103 106 L104 105 L105 104 L106 103 L107 102 L108 101 L109 101 L110 100 L111 100 L112 100 L113 100 L114 100 L115 100 L116 100 L117 101 L118 101 L119 102 L120 101 L121 100 L122 99 L123 98 L124 97 L125 96 L126 96 L127 95 L128 94 L129 93 L130 92 L131 91 L131 90 L131 89 L130 88 L129 87 L129 86 L130 85 L131 85 L132 86 L132 87 L133 88 L134 87 L135 86 L136 85 L137 84 L137 83 Z
-->

<svg id="r" xmlns="http://www.w3.org/2000/svg" version="1.1" width="800px" height="600px">
<g transform="translate(0, 600) scale(1, -1)">
<g id="graphs">
</g>
</g>
</svg>

coefficients_<br/>
<span id="coefficients_"></span><br/>
coefficients<br/>
<span id="coefficients"></span><br/>
weights<br/>
<span id="weights"></span>
</div>
knots<br/>
<div id="controls"></div>
</body>
</html>