<!DOCTYPE html>
<html>
<head>
<title>Write MIDI File</title>
<style type="text/css">
.karaoke { background-color: #eef; padding: .5em; }
.karaoke .t { font-size: 110%; font-weight: bold; }
.karaoke p { margin: 0; padding: .5em; }
.karaoke p.current { background-color: #ffe; }
.karaoke div.current { text-decoration: underline; }
.karaoke span.current { color: #f00; }
.karaoke span.past { color: #d0c; }
.karaoke .k, .karaoke .v, .karaoke .i, .karaoke .l, .karaoke .w { display: none; }
</style>
<script src="JZZ.js"></script>
<script src="JZZ.midi.SMF.js"></script>
<script src="JZZ.synth.Tiny.js"></script>
<script src="JZZ.gui.Player.js"></script>
<script src="JZZ.gui.Karaoke.js"></script>
</head>

<body>
<h1>Write MIDI File</h1>

<div id=out></div>

<script><!--
//https://jazz-soft.net/doc/JZZ/jzzmidi.html
//map poly aftertouch to note pitch, volume change to granular velocity


function midiFile(data) {
	// Create a MIDI file. Type 1; 100 clocks per quarter note.
	// Normally, it would rather be 96, but 100 makes it easier to count.
	var smf = new JZZ.MIDI.SMF(1, 25); //align to frames
	
	// Add MIDI file tracks:
	var trk0 = new JZZ.MIDI.SMF.MTrk(); smf.push(trk0); // First track in Type 1 MIDI file is normally used for tempo changes
	var trk1 = new JZZ.MIDI.SMF.MTrk(); smf.push(trk1); // This one will be for the karaoke lyrics
	var trk2 = new JZZ.MIDI.SMF.MTrk(); smf.push(trk2); // This one will be for the music
	var trk3 = new JZZ.MIDI.SMF.MTrk(); smf.push(trk3); // This one will be for the music
	
	trk0.smfSeqName('Song Title') // The name of the first track serves as the file title
			.smfBPM(60) // Tempo. Normally set at clock 0, but can be also changed later
			.tick(1).smfEndOfTrack(); // otherwise it will end on clock 1690
	
	trk1.smfSeqName('Lyrics') // The names of other tracks don't have any particular meaning
			.smfText('@TMary Was A Little Lame') // Karaoke player will recognize this track by the "@T" tag
			.tick(100).smfText('\\Ma') // New verse starts with a backslash "\"
			.tick(75).smfText('ry ')
			.tick(25).smfText('was ')
			.tick(50).smfText('a ')
			.tick(50).smfText('lit')
			.tick(50).smfText('tle ')
			.tick(50).smfText('lame,')
			.tick(100).smfText('/Lit') // New line starts with a slash "/"
			.tick(50).smfText('tle ')
			.tick(50).smfText('lame,')
			.tick(100).smfText('/Lit')
			.tick(50).smfText('tle ')
			.tick(50).smfText('lame,')
			.tick(100).smfText('/Ma')
			.tick(75).smfText('ry ')
			.tick(25).smfText('was ')
			.tick(50).smfText('a ')
			.tick(50).smfText('lit')
			.tick(50).smfText('tle ')
			.tick(50).smfText('lame,')
			.tick(50).smfText('/A ')
			.tick(50).smfText('lit')
			.tick(50).smfText('tle ')
			.tick(50).smfText('lame ')
			.tick(50).smfText('was ')
			.tick(50).smfText('she!')
			.tick(1).smfEndOfTrack(); // otherwise it will end on clock 1690
	
	trk2.smfSeqName('Tune')
			.ch(0) // all subsequent messages will go to channel 0
			.program(0x4E) // set channel 0 program to whistle
			.tick(100).note('E5', 127, 75) // clock: 100, MIDI channel: 0, note: E5, velocity: 127, duration: 50 clocks
			.tick(50).note(64, 127, 50)   // can also use numerical values for the notes
			.tick(50).note(0x40, 127, 90)
			.tick(100).note('E5', 100, 90).note('G5', 100, 90).note('C6', 127, 90)
			.tick(100).smfEndOfTrack(); // otherwise it will end on clock 1690
	
	trk3.smfSeqName('Bass')
			.ch(1) // all subsequent messages will go to channel 1
			.program(0x4E) // set channel 0 program to whistle
			.tick(200).note('E3', 127, 75) // clock: 100, MIDI channel: 0, note: E5, velocity: 127, duration: 50 clocks
			.tick(50).note(44, 127, 50)   // can also use numerical values for the notes
			.tick(50).note(0x40, 127, 90)
			.tick(100).note('E3', 100, 90).note('G3', 100, 90).note('C4', 127, 90)
			.tick(100).smfEndOfTrack(); // otherwise it will end on clock 1690
	
	
	var str = smf.dump(); // MIDI file dumped as a string
	var b64 = JZZ.lib.toBase64(str); // convert to base-64 string
	var uri = 'data:audio/midi;base64,' + b64; // data URI
	
	// Finally, write it to the document as a link and as an embedded object:
	document.getElementById('out').innerHTML = 'New file: <a download=lame.mid href=' + uri + '>DOWNLOAD</a>';
}

--></script>


<h1>Karaoke</h1>
<p id=player></p>
<pre id=log></pre>
<p id=karaoke></p>

<script><!--
var log = document.getElementById('log');
function report(s) { return function() { log.innerHTML = s; }; }

JZZ.synth.Tiny.register('Web Audio');

JZZ().or(report('Cannot start MIDI engine!')).openMidiOut().or(report('Cannot open MIDI Out!'));
var player = new JZZ.gui.Player({ at: 'player', file: true });
var karaoke = new JZZ.gui.Karaoke('karaoke');
player.connect(karaoke);
player.onEnd = function() { karaoke.reset(); };
player.onStop = function() { karaoke.reset(); };
player.onLoad = function(smf) { karaoke.load(smf); };
player.onJump = function(t) { karaoke.jump(t); };

var data='\
TVRoZAAAAAYAAQADAGRNVHJrAAAAGgD/AwtMaXR0bGUgTGFtZQD/UQMKLCsA/y8ATVRyawAAAPMA/wMG\
THlyaWNzAP8BGEBUTWFyeSBXYXMgQSBMaXR0bGUgTGFtZWT/AQNcTWFL/wEDcnkgGf8BBHdhcyAy/wEC\
YSAy/wEDbGl0Mv8BBHRsZSAy/wEFbGFtZSxk/wEEL0xpdDL/AQR0bGUgMv8BBWxhbWUsZP8BBC9MaXQy\
/wEEdGxlIDL/AQVsYW1lLGT/AQMvTWFL/wEDcnkgGf8BBHdhcyAy/wECYSAy/wEDbGl0Mv8BBHRsZSAy\
/wEFbGFtZSwy/wEDL0EgMv8BA2xpdDL/AQR0bGUgMv8BBWxhbWUgMv8BBHdhcyAy/wEEc2hlIQD/LwBN\
VHJrAAAA8gD/AwVNdXNpYwDAC2SQQH9LgEBAAJA+fxmAPkAAkDx/MoA8QACQPn8ygD5AAJBAfzKAQEAA\
kEB/MoBAQACQQH9agEBACpA+fzKAPkAAkD5/MoA+QACQPn9agD5ACpBAfzKAQEAAkEN/MoBDQACQQ39a\
gENACpBAf0uAQEAAkD5/GYA+QACQPH8ygDxAAJA+fzKAPkAAkEB/MoBAQACQQH8ygEBAAJBAfzKAQEAZ\
kEB/GYBAQACQPn8ygD5AAJA+fzKAPkAAkEB/MoBAQACQPn8ygD5AAJA8f2RAZABDZABIf1qAPEAAQEAA\
Q0AASEAK/y8A';

player.load(new JZZ.MIDI.SMF(JZZ.lib.fromBase64(data)));
--></script>

</body>
</html>