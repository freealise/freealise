<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
      google.charts.load('current', {packages:['wordtree']});
      google.charts.setOnLoadCallback(drawChart);

//TODO: add more words grouped by level and idea and sorted by frequency as a filtered tree with lookup by multiple (+in definition), check by grammar books; credits

// https://developers.google.com/chart/interactive/docs/gallery/wordtree
// )4_ADJ_, @6_ADP_, }5_ADV_, &9_CONJ_, =1_DET_, ]2_NOUN_, %10_NUM_, *7_PRON_, #8_PRT_, >3_VERB_

var _pos = {
  "_NOUN": ["﹞", "noun"],
  "_VERB": ["﹥", "verb"],
  "_ADJ": ["﹚", "adjective"],
  "_ADV": ["﹜", "adverb"],
  "_NUM": ["﹟", "numeral"],
  "_ADP": ["﹫", "adposition"],
  "_PRON": ["﹡", "pronoun"],
  "_CONJ": ["﹠", "conjunction"],
  "_DET": ["﹦", "determiner"],
  "_PRT": ["﹑", "particle"]
};

var pos_ = new RegExp("("+Object.keys(_pos).join("|")+")", "g");
var pos_all = new RegExp("[﹞﹥﹚﹜﹟﹫﹡﹠﹦﹑_]", "g");
var pos_not = new RegExp("[^﹞﹥﹚﹜﹟﹫﹡﹠﹦﹑_]", "g");
var imp = "﹥﹞﹚﹜﹦﹑﹡﹟﹫﹠_";

var v_ssml = "iː ɪ eɪ ɛ æ ə ɚ ʌ ɑː ɔː oʊ ʊ uː aɪ aʊ ɔɪ";
var c_ssml = "p b t d k ɡ m n ŋ f v s z θ ð ʃ ʒ h l ɹ ʧ ʤ j w";
var ph_ = new RegExp("("+v_ssml.replace(/\w/g, "").trim().replace(/\s+/g, "|")+"|"+c_ssml.replace(/\w/g, "").trim().replace(/\s+/g, "|")+")", "g");


      var a = [ ['phrase', 'size', 'value', 'link'],
['x \u00B7 > verb \u237F \u239A  see saw seen', 1, 0.5, 'A 1-01'],
['x \u00B7 ] noun \u2B1A \u23CD  thing', 1, 1, 'A 1-02'],
['x \u00B7 ] noun \u2B1A \u25A2  something', 1, 1, 'A 1-02'],
['x \u00B7 ] noun \u2B1A \u2B1A\u0309  what', 1, 1, 'A 1-02'],
['x \u00B7 = det \u2261  this these', 1, 1, 'A 1-03'],
['x \u00B7 = det \u2262  other', 1, 1, 'A 1-04'],
['x \u00B7 = det \u2260  another', 1, 1, 'A 1-04'],
['x \u00B7 # prt \u2331  else', 1, 1, 'A 1-04'],
['x \u00B7 = det \u2256  same', 1, 1, 'B 1-05'],
['x \u00B7 > verb \u221E \u2022  be am are is being was were been', 1, 1, 'B 1-05'],
['x \u00B7 & conj ~ \u224E  as', 1, 1, 'B 1-05'],
['x \u00B7 ) adj % num \u2680  one', 1, 1, 'B 1-06'],
['x \u00B7 ) adj % num \u2681  two', 1, 1, 'B 1-07'],
['x \u00B7 ] noun \u25CC \u2389  person people', 1, 1, 'B 1-08'],
['x \u00B7 ) adj % num \u066A  many', 1, 1, 'C 1-09'],
['x \u00B7 ) adj % num \u29A6  much', 1, 1, 'C 1-09'],
/*['x \u00B7 ) adj % num \u299F  little', 1, 1, ''],
['x \u00B7 ) adj % num \u060A  few', 1, 1, ''],*/
['x \u00B7 # prt \u2612  not', 1, 1, 'C 1-11'],
['x \u00B7 ) adj % num \u0609  some', 1, 1, 'D 1-12'],
['x \u00B7 ) adj % num \u2140  all', 1, 1, 'D 1-13'],
['x \u00B7 @ adp \u26B2 \u2316  there', 1, 1, 'D 1-14'],
['x \u00B7 ) adj \u238E +  more', 1, 1, 'D 1-15'],
['x \u00B7 & conj \u238E \u2AA4  than', 1, 1, 'D 1-15'],
['x \u00B7 > verb \u221E \u2698  live living alive', 1, 1, 'E 1-16'],
['x \u00B7 ) adj \u2300 \u235C  big', 1, 1, 'E 1-17'],
['x \u00B7 ) adj \u2300 \u235B  small', 1, 1, 'E 1-18'],
['x \u00B7 ) adj \u238E \u203C  very', 1, 1, 'E 1-19'],
['x \u00B7 ] noun \u22D4 \u2443  kind', 1, 1, 'F 1-20'],
['x \u00B7 # prt \u29BD  if', 1, 1, 'F 1-21'],
['x \u00B7 # prt \u22B1  then', 1, 1, 'F 1-21'],
['x \u00B7 > verb \u237F \u226C  touch', 1, 1, 'F 1-22'],
['x \u00B7 @ adp \u26B2 \u22BC  far', 1, 1, 'F 1-23"'],
['x \u00B7 @ adp \u26B2 \u29CB  near', 1, 1, 'F 1-24'],
['x \u00B7 ] noun \u22D4 \u22B9  place', 1, 1, 'G 1-25'],
['x \u00B7 @ adp \u26B2 \u2388  someplace', 1, 1, 'G 1-25'],
['x \u00B7 @ adp \u26B2 \u26B2\u0309  where', 1, 1, 'G 1-25'],
['x \u00B7 & conj \u26CB  in inside', 1, 1, 'C 1-10'],
['x \u00B7 @ adp \u26B2 \u2238  above', 1, 1, 'G 1-26'],
['x \u00B7 ] noun \u22D4 \uFB35  side', 1, 1, 'G 1-27'],
['x \u00B7 & conj \u2390  on', 1, 1, 'G 1-27'],
['x \u00B7 > verb \u237F \u23E6  hear heard', 1, 1, 'H 1-28'],
['x \u00B7 > verb \u263C \u2383  say said', 1, 1, 'H 1-29'],
['x \u00B7 & conj ~ \u2248  about', 1, 1, 'H 1-29'],
['x \u00B7 ] noun \u22D4 \u2381  word', 1, 1, 'H 1-30'],
['x \u00B7 # prt \u23FB  true', 1, 1, 'H 1-31'],
['x \u00B7 & conj ~ \u29C9  like', 1, 1, 'A 2-01'],
['x \u00B7 > verb \u263C \u00A4  have has had', 1, 1, 'A 2-02'],
['x \u00B7 > verb \u263C \u232D  belong', 1, 1, 'A 2-02'],
['x \u00B7 ] noun \u22D4 \u2314  part', 1, 1, 'A 2-03'],
['x \u00B7 & conj \u29C2  of', 1, 1, 'A 2-03'],
['x \u00B7 > verb \u23CE \u2425  do does doing did done', 1, 1, 'B 2-04'],
['x \u00B7 & conj \u26AF  with', 1, 1, 'B 2-04'],
['x \u00B7 > verb \u23CE \u2311  happen', 1, 1, 'B 2-05'],
['x \u00B7 # prt \u22B0  because', 1, 1, 'B 2-06'],
['x \u00B7 > verb \u23E7 \u22EF  think thought thinking', 1, 1, 'C 2-07'],
['x \u00B7 > verb \u23E7 \u2299  know knew known', 1, 1, 'C 2-08'],
['x \u00B7 > verb \u23E7 \u238B  want', 1, 1, 'C 2-09'],
['x \u00B7 > verb \u23E7 \u224D  can could cannot', 1, 1, 'C 2-10'],
['x \u00B7 ) adj \u233F \u237B  bad', 1, 1, 'D 2-11'],
['x \u00B7 ) adj \u233F \u23B7  good well', 1, 1, 'D 2-12'],
['x \u00B7 > verb \u23E7 \u2661  feel felt feeling', 1, 1, 'D 2-13'],
['x \u00B7 ] noun \u22D4 \u29D6  time', 1, 1, 'E 2-14'],
['x \u00B7 @ adp \u23FC \u23FC\u0309  when', 1, 1, 'E 2-14'],
['x \u00B7 & conj \u2380  at', 1, 1, 'E 2-14'],
['x \u00B7 @ adp \u23FC \u27E3  before', 1, 1, 'E 2-15'],
['x \u00B7 ) adj \u2300 \u27F7  long', 1, 1, 'E 2-16'],
['x \u00B7 ) adj \u2300 \u21AD  short', 1, 1, 'E 2-17'],
['x \u00B7 > verb \u23CE \u238C  move', 1, 1, 'E 2-18'],
['x \u00B7 & conj \u2386  to', 1, 1, 'F 1-24'],
['x \u00B7 ] noun * pron \u2369  I', 1, 1, 'F 2-19'],
['x \u00B7 ] noun * pron \u2364  me', 1, 1, 'F 2-19'],
['x \u00B7 ] noun * pron \u2368  you', 1, 1, 'F 2-20'],
['x \u00B7 @ adp \u26B2 \u27DF  here', 1, 1, 'F 2-21'],
['x \u00B7 @ adp \u23FC \u22C8  now', 1, 1, 'F 2-22'],
['x \u00B7 ] noun \u25CC \u2687  someone', 1, 1, 'G 2-23'],
['x \u00B7 ] noun \u25CC \u25CC\u0309  who whom', 1, 1, 'G 2-23'],
['x \u00B7 @ adp \u23FC \u27E2  after', 1, 1, 'G 2-24'],
['x \u00B7 & conj \u29C3  for', 1, 1, 'D 2-12'],
['x \u00B7 ] noun \u22D4 \u27E1  moment', 1, 1, 'G 2-26'],
['x \u00B7 ] noun \u22D4 \u2021  body', 1, 1, 'H 2-27'],
['x \u00B7 > verb \u221E \u2A4D  die dying dead', 1, 1, 'H 2-28'],
['x \u00B7 # prt \u2325  maybe', 1, 1, 'H 2-29'],
['x \u00B7 @ adp \u26B2 \u2A2A  below', 1, 1, 'H 2-30'],

['x . & that', 1, 1, 'A 3-01'],
['x . & and', 1, 1, 'A 3-02'],
['x . & or', 1, 1, 'A 3-03'],
['x . * it, they, them', 1, 1, 'A 3-04'],
['x . * its, their', 1, 1, 'B 3-05'],
['x . * your', 1, 1, 'B 3-06'],
['x . * my', 1, 1, 'B 3-07'],
['x . = a, an', 1, 1, 'B 3-08'],
['x . = the', 1, 1, 'C 3-09'],
['x . ] animal, animals', 1, 1, 'C 3-10'],
['x . > cause, causes, to cause, causing, caused', 1, 1, 'C 3-11'],
['x . & but', 1, 1, 'C 3-12'],
['x . > use, uses, to use, using, used', 1, 1, 'D 3-13'],
['x . % each, each of', 1, 1, 'D 3-14'],
['x . > exist, exists, to exist, existing, existed', 1, 1, 'D 3-15'],
['x . > become, becomes, to become, becoming, became', 1, 1, 'D 3-16'],
['x . = different', 1, 1, 'E 3-17'],
['x . > make, makes, to make, making, made', 1, 1, 'E 3-18'],
['x . > contain, contains, to contain, containing, contained', 1, 1, 'E 3-19'],
['x . ] container, containers', 1, 1, 'E 3-20'],
['x . > try, tries, to try, trying, tried', 1, 1, 'F 3-21'],
['x . > change, changes, to change, changing, changed', 1, 1, 'F 3-22'],
['x . ] surface, surfaces, surface of, surfaces of, on the surface', 1, 1, 'F 3-23'],
['x . > choose, chooses, to choose, choosing, chose, chosen', 1, 1, 'G 3-24'],
['x . @ between', 1, 1, 'G 3-25'],
['x . @ from', 1, 1, 'G 3-26'],
['x . ] machine, machines', 1, 1, 'G 3-27'],
['x . > damage, damages, to damage, damaging, damaged', 1, 1, 'H 3-28'],
['x . ) difficult', 1, 1, 'H 3-29'],
['x . ) easy, easily', 1, 1, 'H 3-30'],
['x . > control, controls, to control, controlling, controlled', 1, 1, 'H 3-31'],
['x . > put, puts, to put, putting', 1, 1, 'A 4-01'],
['x . ) able', 1, 1, 'A 4-02'],
['x . ] shape, shapes, shape of, shapes of', 1, 1, 'A 4-03'],
['x . ] colour, color, colours, colors, colour of, colours of', 1, 1, 'A 4-04'],
['x . @ towards', 1, 1, 'B 4-05'],
['x . > hold, holds, to hold, holding, held', 1, 1, 'B 4-06'],
['x . > pull, pulls, to pull, pulling, pulled', 1, 1, 'B 4-07'],
['x . # then', 1, 1, 'C 4-08'],
['x . @ out, out of', 1, 1, 'C 4-09'],
['x . @ into', 1, 1, 'C 4-10'],
['x . ] eye, eyes', 1, 1, 'D 4-11'],
['x . > look, looks, to look, looking, looked, look at, looks at, to look at, looking at, looked at', 1, 1, 'D 4-12'],
['x . > mark, marks, to mark, marking, marked', 1, 1, 'D 4-13'],
['x . > write, writes, to write, writing, wrote, written', 1, 1, 'D 4-14'],
['x . > draw, draws, to draw, drawing, drew, drawn', 1, 1, 'E 4-15'],
['x . > plan, plans, to plan, planning, planned', 1, 1, 'E 4-16'],
['x . > expect, expects, to expect, expecting, expected', 1, 1, 'E 4-17'],
['x . ) important', 1, 1, 'E 4-18'],
['x . > tell, tells, to tell, telling, told', 1, 1, 'F 4-19'],
['x . % less, less than', 1, 1, 'F 4-20'],
['x . > will', 1, 1, 'F 4-21'],
['x . @ through', 1, 1, 'F 4-22'],
['x . > need, needs, to need, needing, needed', 1, 1, 'G 4-23'],
['x . % most, most of', 1, 1, 'G 4-24'],
['x . ] bottom, bottoms, bottom of, bottoms of', 1, 1, 'G 4-25'],
['x . @ down', 1, 1, 'G 4-26'],
['x . ] air', 1, 1, 'H 4-27'],
['x . > breathe, breathes, to breathe, breathing, breathed', 1, 1, 'H 4-28'],
['x . > eat, eats, to eat, eating, ate, eaten', 1, 1, 'H 4-29'],
['x . ] food', 1, 1, 'H 4-30'],
['x . ] gas, gases', 1, 1, 'A 5-01'],
['x . ) solid', 1, 1, 'A 5-02'],
['x . ] hole, holes, hole in, holes in', 1, 1, 'A 5-03'],
['x . ] liquid, liquids', 1, 1, 'A 5-04'],
['x . % three, three of', 1, 1, 'B 5-05'],
['x . % four, four of', 1, 1, 'B 5-06'],
['x . % five, five of', 1, 1, 'B 5-07'],
['x . ] group, groups, group of, groups of', 1, 1, 'B 5-08'],
['x . ] child, children', 1, 1, 'C 5-09'],
['x . ) female', 1, 1, 'C 5-10'],
['x . ) male', 1, 1, 'C 5-11'],
['x . ] parent, parents, parent of, parents of', 1, 1, 'C 5-12'],
['x . ] mouth, mouths', 1, 1, 'D 5-13'],
['x . > drink, drinks, to drink, drinking, drank, drunk', 1, 1, 'D 5-14'],
['x . ) young', 1, 1, 'D 5-15'],
['x . ] milk', 1, 1, 'D 5-16'],
['x . ] end, ends, end of, ends of', 1, 1, 'E 5-17'],
['x . @ up', 1, 1, 'E 5-18'],
['x . > lift, lifts, to lift, lifting, lifted', 1, 1, 'E 5-19'],
['x . ) long', 1, 1, 'E 5-20'],
['x . > grow, grows, to grow, growing, grew, grown', 1, 1, 'F 5-21'],
['x . ) heavy', 1, 1, 'F 5-22'],
['x . ] length, lengths, length of, lengths of', 1, 1, 'F 5-23'],
['x . > connect, connects, to connect, connecting, connected, connect to, connects to, to connect to, connecting to, connected to', 1, 1, 'G 5-24'],
['x . @ often', 1, 1, 'G 5-25'],
['x . ) white', 1, 1, 'G 5-26'],
['x . ] light, lights', 1, 1, 'G 5-27'],
['x . ] building, buildings', 1, 1, 'H 5-28'],
['x . ] number, numbers, number of, numbers of', 1, 1, 'H 5-29'],
['x . > count, counts, to count, counting, counted', 1, 1, 'H 5-30'],
['x . > enjoy, enjoys, to enjoy, enjoying, enjoyed', 1, 1, 'H 5-31'],
['x . ] water', 1, 1, 'A 6-01'],
['x . ] plant, plants', 1, 1, 'A 6-02'],
['x . ] ground', 1, 1, 'A 6-03'],
['x . > dry, dries, to dry, drying, dried', 1, 1, 'A 6-04'],
['x . ] distance, distances, distance between, distances between', 1, 1, 'B 6-05'],
['x . ) narrow', 1, 1, 'B 6-06'],
['x . ) wide', 1, 1, 'B 6-07'],
['x . % several, several of', 1, 1, 'B 6-08'],
['x . ] top, tops, top of, tops of, on top of', 1, 1, 'C 6-09'],
['x . ] front, front of, in front of', 1, 1, 'C 6-10'],
['x . ] back, back of', 1, 1, 'C 6-11'],
['x . @ behind', 1, 1, 'C 6-12'],
['x . ) quick, quickly', 1, 1, 'D 6-13'],
['x . ] centre, center, centres, centers, centre of, centres of', 1, 1, 'D 6-14'],
['x . ) round', 1, 1, 'D 6-15'],
['x . @ around', 1, 1, 'D 6-16'],
['x . > sound, sounds, to sound, sounding, sounded', 1, 1, 'E 6-17'],
['x . ) loud', 1, 1, 'E 6-18'],
['x . ) high', 1, 1, 'E 6-19'],
['x . ) low', 1, 1, 'E 6-20'],
['x . > prevent, prevents, to prevent, preventing, prevented', 1, 1, 'F 6-21'],
['x . > fall, falls, to fall, falling, fell, fallen', 1, 1, 'F 6-22'],
['x . ] head, heads', 1, 1, 'F 6-23'],
['x . > hit, hits, to hit, hitting', 1, 1, 'F 6-24'],
['x . > stop, stops, to stop, stopping, stopped', 1, 1, 'G 6-25'],
['x . ) hot', 1, 1, 'G 6-26'],
['x . ) cold', 1, 1, 'G 6-27'],
['x . > compare, compares, to compare, comparing, compared, compare one with another', 1, 1, 'H 6-28'],
['x . ] weight, weights, weight of, weights of', 1, 1, 'H 6-29'],
['x . > measure, measures, to measure, measuring, measured', 1, 1, 'H 6-30'],
['x . ) flat', 1, 1, 'A 7-01'],
['x . ) green', 1, 1, 'A 7-02'],
['x . ) thin', 1, 1, 'A 7-03'],
['x . ] tree, trees', 1, 1, 'A 7-04'],
['x . > carry, carries, to carry, carrying, carried', 1, 1, 'B 7-05'],
['x . > sleep, sleeps, to sleep, sleeping, slept', 1, 1, 'B 7-06'],
['x . ] arm, arms', 1, 1, 'B 7-07'],
['x . ] hand, hands', 1, 1, 'B 7-08'],
['x . ] adult, adults', 1, 1, 'C 7-09'],
['x . ] man, men', 1, 1, 'C 7-10'],
['x . ] woman, women', 1, 1, 'C 7-11'],
['x . * he, him, his', 1, 1, 'C 7-12'],
['x . * she, her', 1, 1, 'C 7-13'],
['x . > start, starts, to start, starting, started', 1, 1, 'D 7-14'],
['x . > burn, burns, to burn, burning, burned, burnt', 1, 1, 'D 7-15'],
['x . ] music', 1, 1, 'D 7-16'],
['x . > hurt, hurts, to hurt, hurting', 1, 1, 'E 7-17'],
['x . ) hard', 1, 1, 'E 7-18'],
['x . > press, presses, to press, pressing, pressed', 1, 1, 'E 7-19'],
['x . > promise, promises, to promise, promising, promised', 1, 1, 'F 7-20'],
['x . ) sexual', 1, 1, 'F 7-21'],
['x . > marry, marries, to marry, marrying, married, married to', 1, 1, 'F 7-22'],
['x . ] family, families', 1, 1, 'F 7-23'],
['x . ) likely', 1, 1, 'G 7-24'],
['x . > cut, cuts, to cut, cutting', 1, 1, 'G 7-25'],
['x . ] piece, pieces, piece of, pieces of', 1, 1, 'G 7-26'],
['x . > taste, tastes, to taste, tasting, tasted', 1, 1, 'G 7-27'],
['x . ] circle, circles', 1, 1, 'H 7-28'],
['x . ] picture, pictures, picture of, pictures of', 1, 1, 'H 7-29'],
['x . ] stone, stones', 1, 1, 'H 7-30'],
['x . > find, finds, to find, finding, found', 1, 1, 'H 7-31'],
['x . > allow, allows, to allow, allowing, allowed', 1, 1, 'A 8-01'],
['x . > turn, turns, to turn, turning, turned', 1, 1, 'A 8-02'],
['x . ] metal', 1, 1, 'A 8-03'],
['x . ] vehicle, vehicles', 1, 1, 'A 8-04'],
['x . ] hair, hairs', 1, 1, 'B 8-05'],
['x . > twist, twists, to twist, twisting, twisted', 1, 1, 'B 8-06'],
['x . ] string, strings', 1, 1, 'B 8-07'],
['x . % six, six of', 1, 1, 'C 8-08'],
['x . % seven, seven of', 1, 1, 'C 8-09'],
['x . % eight, eight of', 1, 1, 'C 8-10'],
['x . % nine, nine of', 1, 1, 'C 8-11'],
['x . % ten, ten of', 1, 1, 'C 8-12'],
['x . > give, gives, to give, giving, gave, given, give this to', 1, 1, 'D 8-13'],
['x . > mix, mixes, to mix, mixing, mixed', 1, 1, 'D 8-14'],
['x . ] paper', 1, 1, 'D 8-15'],
['x . > cover, covers, to cover, covering, covered', 1, 1, 'D 8-16'],
['x . ] rule, rules', 1, 1, 'E 8-17'],
['x . ] government, governments', 1, 1, 'E 8-18'],
['x . > work, works, to work, working, worked', 1, 1, 'E 8-19'],
['x . ] money', 1, 1, 'E 8-20'],
['x . ] leg, legs', 1, 1, 'F 8-21'],
['x . > help, helps, to help, helping, helped', 1, 1, 'F 8-22'],
['x . ] disease, diseases', 1, 1, 'F 8-23'],
['x . ) healthy', 1, 1, 'F 8-24'],
['x . ) straight', 1, 1, 'G 8-25'],
['x . ] sun', 1, 1, 'G 8-26'],
['x . ] day, days', 1, 1, 'G 8-27'],
['x . ] sky, skies', 1, 1, 'G 8-28'],
['x . > mean, means, to mean, meaning, meant', 1, 1, 'H 8-29'],
['x . % hundred, hundred of', 1, 1, 'H 8-30'],
['x . > learn, learns, to learn, learning, learned, learnt', 1, 1, 'H 8-31'],
['x . ] seed, seeds', 1, 1, 'A 9-01'],
['x . ] fruit', 1, 1, 'A 9-02'],
['x . > buy, buys, to buy, buying, bought', 1, 1, 'A 9-03'],
['x . ) black', 1, 1, 'A 9-04'],
['x . ] clothing', 1, 1, 'B 9-05'],
['x . ] cloth', 1, 1, 'B 9-06'],
['x . ] bread', 1, 1, 'B 9-07'],
['x . ] month, months', 1, 1, 'C 9-08'],
['x . ] year, years', 1, 1, 'C 9-09'],
['x . > fly, flies, to fly, flying, flew, flown', 1, 1, 'C 9-10'],
['x . ] bird, birds', 1, 1, 'C 9-11'],
['x . ] egg, eggs', 1, 1, 'D 9-12'],
['x . ) yellow', 1, 1, 'D 9-13'],
['x . ) red', 1, 1, 'D 9-14'],
['x . ] square, squares', 1, 1, 'D 9-15'],
['x . ] electricity', 1, 1, 'E 9-16'],
['x . ] blood', 1, 1, 'E 9-17'],
['x . ] amount, amounts, amount of, amounts of', 1, 1, 'E 9-18'],
['x . > read, reads, to read, reading', 1, 1, 'F 9-19'],
['x . ] country, countries', 1, 1, 'F 9-20'],
['x . ] soldier, soldiers', 1, 1, 'F 9-21'],
['x . ] story, stories', 1, 1, 'F 9-22'],
['x . > push, pushes, to push, pushing, pushed', 1, 1, 'G 9-23'],
['x . ] atom, atoms', 1, 1, 'G 9-24'],
['x . ] chemical, chemicals', 1, 1, 'G 9-25'],
['x . ) sweet', 1, 1, 'G 9-26'],
['x . ] foot, feet', 1, 1, 'H 9-27'],
['x . > play, plays, to play, playing, played', 1, 1, 'H 9-28'],
['x . ] game, games', 1, 1, 'H 9-29'],
['x . ) beautiful', 1, 1, 'H 9-30'],
['x . % thousand, thousand of', 1, 1, 'A 10-01'],
['x . ] boat, boats', 1, 1, 'A 10-02'],
['x . > rub, rubs, to rub, rubbing, rubbed', 1, 1, 'A 10-03'],
['x . ] metre, meter, metres, meters', 1, 1, 'A 10-04'],
['x . > show, shows, to show, showing, showed, shown', 1, 1, 'B 10-05'],
['x . > laugh, laughs, to laugh, laughing, laughed', 1, 1, 'B 10-06'],
['x . ] wheel, wheels', 1, 1, 'B 10-07'],
['x . % zero, zero of', 1, 1, 'B 10-08'],
['x . ] business, businesses', 1, 1, 'C 10-09'],
['x . ] hour, hours', 1, 1, 'C 10-10'],
['x . ] clay', 1, 1, 'C 10-11'],
['x . > explode, explodes, to explode, exploding, exploded', 1, 1, 'C 10-12'],
['x . ) happy', 1, 1, 'D 10-13'],
['x . ) angry', 1, 1, 'D 10-14'],
['x . > fear, fears, to fear, fearing, feared', 1, 1, 'D 10-15'],
['x . ] radio, radios', 1, 1, 'D 10-16'],
['x . ) sad', 1, 1, 'E 10-17'],
['x . ) careful, carefully', 1, 1, 'E 10-18'],
['x . ) brown', 1, 1, 'E 10-19'],
['x . > love, loves, to love, loving, loved', 1, 1, 'E 10-20'],
['x . ) tall', 1, 1, 'F 10-21'],
['x . ] name, names, name of, names of', 1, 1, 'F 10-22'],
['x . > sit, sits, to sit, sitting, sat', 1, 1, 'F 10-23'],
['x . = similar', 1, 1, 'G 10-24'],
['x . > multiply, multiplies, to multiply, multiplying, multiplied, multiply by, multiplies by, to multiply by, multiplying by, multiplied by', 1, 1, 'G 10-25'],
['x . ] alcohol', 1, 1, 'G 10-26'],
['x . ] fish, fishes', 1, 1, 'G 10-27'],
['x . ] grain', 1, 1, 'H 10-28'],
['x . ] salt', 1, 1, 'H 10-29'],
['x . ] fat', 1, 1, 'H 10-30'],
['x . ] coal', 1, 1, 'H 10-31'],
['x . ] kilogram, kilograms', 1, 1, 'A 11-01'],
['x . ] sentence, sentences', 1, 1, 'A 11-02'],
['x . ] cat, cats', 1, 1, 'A 11-03'],
['x . ) sour', 1, 1, 'A 11-04'],
['x . ] bone, bones', 1, 1, 'B 11-05'],
['x . > clean, cleans, to clean, cleaning, cleaned', 1, 1, 'B 11-06'],
['x . ] sheep', 1, 1, 'B 11-07'],
['x . > decide, decides, to decide, deciding, decided, decide if, decides if, to decide if, deciding if, decided if', 1, 1, 'C 11-08'],
['x . ] god, gods', 1, 1, 'C 11-09'],
['x . ] nose, noses', 1, 1, 'C 11-10'],
['x . > win, wins, to win, winning, won', 1, 1, 'C 11-11'],
['x . ] tube, tubes', 1, 1, 'D 11-12'],
['x . ] flower, flowers', 1, 1, 'D 11-13'],
['x . ) blue', 1, 1, 'D 11-14'],
['x . ) smooth', 1, 1, 'E 11-15'],
['x . ] school, schools', 1, 1, 'E 11-16'],
['x . > lead, leads, to lead, leading, led', 1, 1, 'E 11-17'],
['x . ] book, books', 1, 1, 'E 11-18'],
['x . & only', 1, 1, 'F 11-19'],
['x . > go, goes, to go, going, went, gone, go to, goes to, to go to, going to, went to', 1, 1, 'F 11-20'],
['x . * we, us', 1, 1, 'F 11-21'],
['x . > pay, pays, to pay, paying, paid', 1, 1, 'F 11-22'],
['x . ) first', 1, 1, 'G 11-23'],
['x . > explain, explains, to explain, explaining, explained', 1, 1, 'G 11-24'],
['x . @ by', 1, 1, 'G 11-25'],
['x . ] lesson, lessons', 1, 1, 'G 11-26'],
['x . > take, takes, to take, taking, took, taken', 1, 1, 'H 11-27'],
['x . ) better, better than', 1, 1, 'H 11-28'],
['x . > own, owns, to own, owning, owned', 1, 1, 'H 11-29'],
['x . = which, which of', 1, 1, 'H 11-30'],
['x . ] doctor, doctors', 1, 1, 'A 12-01'],
['x . ] police', 1, 1, 'A 12-02'],
['x . ] law, laws', 1, 1, 'A 12-03'],
['x . > ask, asks, to ask, asking, asked', 1, 1, 'B 12-04'],
['x . ] question, questions', 1, 1, 'B 12-05'],
['x . # yes', 1, 1, 'B 12-06'],
['x . # no', 1, 1, 'B 12-07'],
['x . ] room, rooms', 1, 1, 'C 12-08'],
['x . ] line, lines', 1, 1, 'C 12-09'],
['x . ] toilet, toilets', 1, 1, 'C 12-10'],
['x . ] floor, floors', 1, 1, 'C 12-11'],
['x . ] noun, nouns', 1, 1, 'D 12-12'],
['x . > add, adds, to add, adding, added', 1, 1, 'D 12-13'],
['x . ) sharp', 1, 1, 'D 12-14'],
['x . ) dangerous', 1, 1, 'D 12-15'],
['x . ] verb, verbs', 1, 1, 'E 12-16'],
['x . ) strong', 1, 1, 'E 12-17'],
['x . # why', 1, 1, 'E 12-18'],
['x . # how', 1, 1, 'E 12-19'],
['x . ) right', 1, 1, 'F 12-20'],
['x . ) left', 1, 1, 'F 12-21'],
['x . ] tool, tools', 1, 1, 'F 12-22'],
['x . ] wood', 1, 1, 'F 12-23'],
['x . ] dog, dogs', 1, 1, 'G 12-24'],
['x . ] ear, ears', 1, 1, 'G 12-25'],
['x . ] car, cars', 1, 1, 'G 12-26'],
['x . ] house, houses', 1, 1, 'G 12-27'],
['x . ] hello', 1, 1, 'H 12-28'],
['x . > please', 1, 1, 'H 12-29'],
['x . > thank, thanks, to thank, thanking, thanked', 1, 1, 'H 12-30'],
['x . ) sorry', 1, 1, 'H 12-31'],
          ];



/*var tmp = [];
for (var i=1; i<a.length; i++) {
  tmp[i-1] = a[i][0].split('  ')[1];
}
document.write('<textarea cols=50 rows=25>'+tmp.join('\n')+'</textarea>');
*/


var ltr = 'ABCDEFGH';
a[0][4] = 'level';

for (var i=1; i<a.length; i++) {
  a[i][4] = (parseInt(a[i][3].charAt(2))-1) * 8 + ltr.indexOf(a[i][3].charAt(0)) + parseInt(a[i][3].slice(4))/32;
}
a.sort(function(a, b){return a[4]-b[4];});

var data = null;
var view = null;
var chart = null;
var options = null;

var filter = "";


      function filterChart(q) {
        filter = q;
        view = new google.visualization.DataView(data);

        view.setColumns([0,1,2]);
        view.setRows(view.getFilteredRows([{column: 0, test: (value, rowId, columnId, datatable) => { 
          var found = false;
          if (value.indexOf(filter) >= 0) {
            console.log(filter +' '+value);
            found = true;
          }
          return found;
        }}]));
        chart.draw(view, options);
        
        resetColors();
      }


      function drawChart() {
        data = google.visualization.arrayToDataTable(a);

        options = {
          width: 1024,
          height: 4096,
          fontName: 'monospace',
          colors: ['#808080', '#000000'],
          wordtree: {
            format: 'implicit',
            type: 'suffix',
            word: 'x'
          }
        };

        chart = new google.visualization.WordTree(document.getElementById('wordtree_basic'));

        view = new google.visualization.DataView(data);
        view.setColumns([0,1,2]);
        chart.draw(view, options); //data

        var root = document.getElementById('root').value;
        if (root.search(/\w/) == -1 || root == 'x') { resetColors(); }
      }


      var sel = {};
      var g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
      g.setAttribute('id', 'g');

      function resetColors() {
        var paths = document.getElementById('wordtree_basic').getElementsByTagName('path');
        for (var i=0; i<paths.length; i++) {
          paths[i].setAttribute('fill', '#f0f0f0');
        }

        var txt = document.getElementById('wordtree_basic').getElementsByTagName('text');

        if (g.innerHTML == '') {
          for (var i=0; i<txt.length; i++) {
            /*if (txt[i].textContent == 'ADJ') {
              txt[i].setAttribute('fill', '#0000ff');
            }*/
            if (txt[i+1] && txt[i].textContent.search(/\W/) > -1 && txt[i+1].textContent.search(/\W/) == -1) {

              var pb = -1;
              for (var j=0; j<a.length; j++) {
                var tmp = a[j][0].split('  ');
                var tmp = ' ' + tmp[tmp.length-1] + ' ';

                if (tmp.indexOf(' '+txt[i+1].textContent+' ') >= 0) {
                  pb = a[j][4];
                  break;
                }
              }
              if (pb >= 0) {
                var arc = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                arc.setAttribute('cx', txt[i].getAttribute('x')-6);
                arc.setAttribute('cy', txt[i].getAttribute('y')-2);
                arc.setAttribute('stroke', 'darkgray');
                arc.setAttribute('stroke-width', '2');
                arc.setAttribute('fill', 'none');
                arc.setAttribute('r', '1');
                arc.setAttribute('pathLength', '360');
                arc.setAttribute('stroke-dasharray', ''+(22.5*pb)+' '+(360-22.5*pb));
                arc.setAttribute('transform', 'rotate(-90 '+arc.getAttribute('cx')+' '+arc.getAttribute('cy')+')');
                g.appendChild(arc);
              }
            }
          }
        }
        var root = document.getElementById('root').value;
        if (root.search(/\w/) == -1 || root == 'x') { 
          document.getElementsByTagName('svg')[0].appendChild(g);
        }

        for (var i=0; i<txt.length; i++) {
          if (sel[txt[i].textContent]) {
            txt[i].setAttribute('stroke-width', '1');
            txt[i].setAttribute('stroke', txt[i].getAttribute('fill'));
          }

          txt[i].setAttribute('onclick', 'lookupWord(this, event)');
          txt[i].setAttribute('onpointerup', 'selectWord(this, event)');
          txt[i].setAttribute('onpointerdown', 'selectWord(this, event)');
        }
        document.getElementById('svg').innerText = document.getElementById('wordtree_basic').innerHTML;
        document.getElementById('svg').style.display = 'none';

        ltwf.style.display = 'none';
      }


      var x = 0, y = 0;
      var md = false;

      function selectWord(et, evt) {
        if (md===false || (md===true && parseInt(evt.clientX)==x && parseInt(evt.clientY)==y)) {

          if (sel[et.textContent] === true) {
            delete sel[et.textContent];

            et.setAttribute('stroke-width', '0');
            et.setAttribute('stroke', 'none');
          } else {
            sel[et.textContent] = true;

            et.setAttribute('stroke-width', '1');
            et.setAttribute('stroke', et.getAttribute('fill'));
          }
        }
        document.getElementById('status').innerText = JSON.stringify(sel);
        x = parseInt(evt.clientX);
        y = parseInt(evt.clientY);
        md = !md;
      }

      function lookupWord(et, evt) {
        if (et.textContent == 'x') {
          g.style.display = 'block';
        } else {
          g.style.display = 'none';
        }
        var found = false;
        for (var i=0; i<a.length; i++) {
          var tmp = a[i][0].split('  ');
          var tmp = ' ' + tmp[tmp.length-1] + ' ';

          if (tmp.indexOf(' '+et.textContent+' ') >= 0) {
            loadBasicWords(a[i][3]);
            found = true;
            break;
          }
        }
        if (found === false) {
          ltwf.style.display = 'none';
        }
      }


      function highlightWords(q) {
        return q.replace(/<b\sclass='Headword'>[a-zA-Z\s]+<\/b>/g, function(x){
          return x.slice(0,x.indexOf("'>")+2) + x.slice(x.indexOf("'>")+2,-4).replace(/\s+/g,'\u00A0') + "</b>";
          
        }).replace(/[>\s][a-zA-Z\,\.\:\u00A0\"\']+[\s?!<]/g, function(x){
          var b = '';
          var d = '';
          //for (var i=0; i<parseInt(Math.random()*8)+1; i++) {
            b += '<span>';
            d += '</span>';
          //}
          x = x.slice(0,1)+b+x.slice(1,-1)+d+x.slice(-1);

          return x;
        });
      }


      var phrases = [];

      function splitWords(q) {
        phrases = [];

        return q.replace(/(\[|\]|<i>|<\/i>)/g,'').replace(/ id='Quiz'/g, " id='Quiz' class='notranslate'").replace(/<p class='(Caption|Definition)'>.+<\/p>/g, function(y){
          var s = y.slice(y.indexOf("'>")+2,-4).replace(/(<span>|<\/span>)/g,'').replace(/\sclass='Headword'/g,'');
          var p = "";
          var b = "";
          var o = s.replace(/\d+-\d+\./g,'').replace(/(<b>|<\/b>)/g,'').replace(/\s+/g, ' ');
          if (s.search(/\d/) == -1) {
            p = '<sub title="' + o.replace(/[^\w\s]/g,'').replace(/\s+/g,' ') + '"></sub>';
            b = '<button class="notranslate" title="Parse" id="parse" onclick="window.parent.loadSyntax(`' + o.slice(0,o.indexOf(". ")).replace(/\"/g,"'") + '`);">⎂</button>';

            if (y.indexOf("class='")+7 == y.indexOf("Caption")) {
              phrases[phrases.length] = o;
            } else {
              var a = o.replace(/=/g,'').split('. ');
              for (var i=0; i<a.length; i++) {
                phrases[phrases.length] = a[i].replace(/[^\w\s]/g,'').trim();
              }
            }
          }
          
          return y.slice(0,y.indexOf("'>")+2) + y.slice(y.indexOf("'>")+2,-4).replace(/>[a-zA-Z\,\.\:\u00A0\"\']+</g, function(x){
            var p_ = p;
            if (x.slice(1,-1).search(/\w/) == -1) {
              p_ = "";
            }
            return "><ruby><span class='notranslate'><u onclick='window.parent.loadMorph(event);'>"+x.slice(1,-1).replace(/\u00A0/g, p_+"</u>\u00A0<u onclick='window.parent.loadMorph(event);'>")+p_+"</u></span><rp>`</rp><rt>"+x.slice(1,-1)+"</rt><rp>`</rp></ruby><";
          }) + '<p><button class="notranslate" title="Say" id="say" onclick="window.parent.loadSpeech(`' + o.replace(/\"/g,"'") + '`);">&#x25B7;</button>'+b+'<small>' + s + '</small></p></p>';
        }).replace(/>who</g,'>who`<');
      }


      function loadBasicWords(q) {
        for (var i=0; i<btns.length; i++) {
          btns[i].disabled = true;
        }
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            var arr = this.responseText.split('<body>');

            arr[1] = highlightWords(arr[1]);
            var res = arr[0] + '<body>' + highlightWords(arr[1]).replace(/<a /g, "<a target='_blank' style='text-decoration:none' ");

            res = splitWords(res);
            
            ltwf_.document.open();
            ltwf_.document.write(res.replace('</body>', document.getElementById('tw').value+'</body>'));
            ltwf_.document.close();

            ltwf.onload = function() {
              setTimeout(function() {
                ltwf.src = "#" + q.split(" ")[1];

                if (ltwf_.document.getElementById(q.split(" ")[1])) {
                  ltwf_.document.getElementById(q.split(" ")[1]).scrollIntoView();
                }
                document.getElementById('root').scrollIntoView();

                //ltwf_.onscroll = function(e){tl_.scrollTo(0, ltwf_.scrollY);}

                for (var i=0; i<btns.length; i++) {
                  btns[i].disabled = false;
                }
              }, 40);
            };

            ltwf.style.display = 'block';
            ltwf.blur();
          }
        };
        xhttp.open("GET", url + "?a=nsm&q=" + q.replace(" ", "_"), true);
        xhttp.send();
      }


      var indx = 1;
      var num_old = -1;
      var btns = document.getElementsByTagName('button');

      function loadWord(fwd) {
        for (var i=0; i<btns.length; i++) {
          btns[i].disabled = true;
        }
        if (fwd === true) {
          indx++;
          indx = Math.min(indx,a.length-1);
        } else if (fwd === false) {
          indx--;
          indx = Math.max(1,indx);
        }

        document.getElementById('root').value = a[indx][0].slice(a[indx][0].lastIndexOf('  ')+2).split(' ')[0];
        if (parseInt(a[indx][4]) != num_old) {
          loadBasicWords(a[indx][3]);
          num_old = parseInt(a[indx][4]);
        } else {
          ltwf.src = "#" + a[indx][3].split(" ")[1];

          if (ltwf_.document.getElementById(a[indx][3].split(" ")[1])) {
            ltwf_.document.getElementById(a[indx][3].split(" ")[1]).scrollIntoView();
          }
          document.getElementById('root').scrollIntoView();

          setTimeout(function() {
            for (var i=0; i<btns.length; i++) {
              btns[i].disabled = false;
            }
          }, 1000);
        }
        ltwf.style.display = 'block';
        drawChart();
      }


      function loadRoot() {
        document.getElementById('root').value = 'x';
        ltwf.style.display = 'none';
        drawChart();
      }


function loadSyntax(q) {
  var found = false;
  for (var k=0; k<phrases.length; k++) {
    if (q.indexOf(phrases[k].replace(/"/g, "'")) >= 0) {
      found = true;
      break;
    }
  }
  if (found === false) { return; }

  var b = parseInt(q.length);
  var d = parseInt(q.length);
  if (b == d) {
    var n = q.substr(0, b).replace(/[^\w\s]/g, "").trim().split(" ").length;
  } else {
    var n = q.replace(/[^\w\s]/g, "").trim().split(" ").length;
  }
  var q = q.replace(/[^\w\s]/g, "").trim().split(" ");
  for (var i=0; i<q.length; i++) {
    q[i] += "_*";
    if (q[i+1]) {
      q[i] = q[i] + " " + q[i+1];
    }
  }
  var q = q.join(",");
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      //console.log(this.responseText);
      var json = JSON.parse("["+this.responseText.split(">[")[1].split("]<")[0]+"]");
      var r = "";
      for (var i=0; i<json.length; i++) {
        if (json[i].ngram.indexOf("_*") > -1) {
          var j = i+2;
          while (json[j] && json[j].ngram.split(" ")[0].split("_")[0] == json[i].ngram.split(" ")[0].split("_")[0]) {
            json[j].ngram = "";
            j++;
          }
          json[i].ngram = "";
        }
        if (json[i].ngram.length > 0) {
          r += json[i].ngram.split(" ")[0] + " ";
        }
      }
      r = r.trim().replace(pos_, function(x) { return _pos[x][0]; });
      //phrase.value = r.substr(0, b+n) + " " + r.substr(b+n);
      //phrase.setSelectionRange(b+n, d+n);
      //phrase.focus();
      
      var tmp = r.substr(0, b+n) + " " + r.substr(b+n);
      var o = phrases[k].replace(/[\s\u00A0]+/g,' ').replace(/[^\w\s]/g,'').trim().split(' ');
      var len_r = tmp.split(' ').length;
      if (o.length > len_r) {
        for (var i=len_r; i<=o.length; i++) {
          tmp += ' ' + o[i-1] + imp[imp.length-1];
        }
      }
      phrases[k] = tmp;

      var ps = ltwf_.document.getElementsByTagName('sub');
      var phrase = phrases[k].replace(pos_all,'').replace(/\s+/g,' ').trim();
      var ws = phrase.split(' ');
      var sb = phrases[k].replace(pos_not,'');

      var next = "";
      var present = "";
      for (var i=0; i<sb.length; i++) {
        for (var j=0; j<ps.length; j++) {
          var ph = ps[j].parentElement.innerText.replace(/[\s\u00A0]+/g,' ').replace(/[^\w\s]/g,'').trim();

          var found = false;
          if (ph == ws[i]) {
            found = true;
          } else {
            var a = ph.split(' ');
            for (var n=0; n<a.length; n++) {
              if (a[n] == ws[i]) {
                found = true;
                break;
              }
            }
          }

          if (ps[j].title.indexOf(phrase) >= 0 && ps[j].innerText == '' && found === true) {
            ps[j].innerText = sb.charAt(i);
            ps[j].parentElement.style.opacity = 1.0-(imp.indexOf(sb.charAt(i))+1)/12.5;
            ps[j].parentElement.style.filter = 'hue-rotate(' + imp.indexOf(sb.charAt(i))*36 + 'deg)';
            present = ps[j].title;
            if (ps[j+1]) { next = ps[j+1].title; }
            break;
          }
        }
      }
      if (et) {
        var popup = ltwf_.document.getElementById('popup');
        popup.style.top = ltwf_.scrollY + et.getBoundingClientRect().y + 'px';
        popup.style.left = ltwf_.scrollX + et.getBoundingClientRect().x + 'px';
      }
      k++;
      if (phrases[k]) {
        var phrase = phrases[k].replace(/\s+/g,' ').trim();
        console.log(phrase +' | '+next);
        if (next == present && next.indexOf(phrase) >= 0) {
          
          loadSyntax(phrases[k].replace(/\"/g,"'"));
        }
      }
    }
  };
  xhttp.open("GET", url + "?a=parse&q=" + encodeURIComponent(q), true);
  xhttp.send();
}


var et = null;

function loadMorph(e) {
  var q = e.target.innerText;
  if (q != "") {
    q = q.replace(/[^\w\s]/g, "").trim() + "_INF";
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {
        //console.log(this.responseText);
        var json = JSON.parse("["+this.responseText.split(">[")[1].split("]<")[0]+"]");
        var r = "";
        for (var i=1; i<json.length; i++) {
          if (json[i].ngram.length > 0) {
            r += "<li><ruby><span onclick='window.parent.loadSpeech(`" + json[i].ngram + ");' class='notranslate'>" + json[i].ngram + "</span><rp>`</rp><rt>" + json[i].ngram + "</rt><rp>`</rp></ruby></li>";
          }
        }
        et = e.target;
        var popup = ltwf_.document.getElementById('popup');

        popup.innerHTML = '<div id="nav" class="notranslate"><button onclick="this.parentElement.parentElement.style.visibility=\'hidden\';">x</button><audio src=""></audio><select id="accent" title="Accent"><option value="US">US</option><option value="UK">UK</option><option value="AU">AU</option></select><button title="Say" id="say" onclick="window.parent.loadSpeech(\'' + q.slice(0,q.indexOf('_')) + '\');">&#x25B7;</button></div><hr/><ul>'+r+'</ul>';

        popup.style.top = ltwf_.scrollY + et.getBoundingClientRect().y + 'px';
        popup.style.left = ltwf_.scrollX + et.getBoundingClientRect().x + 'px';

        popup.style.visibility = 'visible';
        
        e.target.focus();
        window.parent.loadSpeech( q.slice(0,q.indexOf('_')) );
      }
    };
    xhttp.open("GET", url + "?a=parse&q=" + encodeURIComponent(q), true);
    xhttp.send();
  }
}


function loadSpeech(q) {
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200) {

        ltwf_.document.getElementsByTagName('audio')[0].src = "data:audio/mp3;base64," + this.responseText;
        ltwf_.document.getElementsByTagName('audio')[0].load();
        ltwf_.document.getElementsByTagName('audio')[0].play();
      }
    };
    xhttp.open("GET", url + "?a=tts&accent=" + ltwf_.document.getElementById("accent").value + "&q=" + encodeURIComponent(q), true);
    xhttp.send();
}


function toggleNote() {
  if (gtframe.style.display != 'block') {
    gtframe.style.display = 'block';
  } else {
    gtframe.style.display = 'none';
  }
}

    </script>
  </head>
  <body>

    <div style='position:absolute;z-index:1'><button onclick="loadRoot();">x</button><button onclick="loadWord(false);"> <- </button><button onclick="loadWord(null);">•</button><button onclick="loadWord(true);"> -> </button><button onclick="toggleNote();">&#x2399;</button><label for="root">Word:</label> <input value="x" id="root" oninput="filterChart(this.value)"></div>
    
    <div onclick='resetColors()' id="wordtree_basic" style="user-select: none; width: 512px;"></div>
    <iframe id="ltwf" style="display:none; top:36px; left:0px; width:320px; height:448px; position:absolute;" src="about:blank"></iframe>

    <div class="google-translate-place">
      <div class="google-translate-crop">
        <iframe class="google-translate" src="https://www.google.com/search?igu=1&q=שם+in+English+google+translate&authuser=0&hl=en-US"></iframe>
      </div>
    </div>
    
    <textarea id='status'></textarea>
    <textarea cols=100 rows=25 id='svg'></textarea>

    <textarea id='tw' style='display:none'>
<div id="popup"><div id="nav" class="notranslate"><button onclick="this.parentElement.parentElement.style.visibility=\'hidden\';">x</button><audio src=""></audio><select id="accent" title="Accent"><option value="US">US</option><option value="UK">UK</option><option value="AU">AU</option></select></div><hr/></div>
<style>
    iframe {
      display: none !important;
    }
    body {
      top: 0px !important;
    }
    span, u {
      text-decoration: none;
      color: hsl(180,25%,25%);
    }
    s::before, s::after, i::before, i::after, b::before, b::after, span::before, span::after {
      content: ' ';
    }
    rt {
      position: absolute;
      top: -1.25em;
      left: -8em;
      font-size: 50%;
    }
    #popup {
      width: 144px;
      margin-top: 2em;
      line-height: 1em;
      border: 1px dashed lightgray;
      position: absolute;
      background-color: #ffffff;
      font-size: 80%;
      visibility: hidden;
    }
    #popup button, #popup select {
      margin: 0;
      color: #000000;
      float: right;
      width: 48px;
      height: 32px;
    }
    #popup rt {
      font-size: 80%;
    }
</style>
<div style="position:fixed;bottom:-20px;right:0;" id="google_translate_element"></div>
<script>
    function googleTranslateElementInit() {
        new google.translate.TranslateElement(
            { pageLanguage: 'en', /*layout: google.translate.TranslateElement.InlineLayout.SIMPLE*/ },
            'google_translate_element'
        );
    }
</script>
<script src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
    </textarea>

        <script language="Javascript">
      var ltwf = document.getElementById('ltwf');
      ltwf_ = ltwf.contentWindow || (ltwf.contentDocument.document || ltwf.contentDocument);

      var gtframe = document.getElementsByClassName("google-translate-place")[0]

      var url = "https://script.google.com/macros/s/AKfycbz5br4wnfSGtucWKwGQq1Tb07eshJez6uVaFatn4xJAc_rcrcA/exec";


      function loadFrame(word) {
          document.getElementsByTagName('iframe')[1].src = 'https://www.google.com/search?igu=1&q='+word+'+in+English+google+translate&oq=google+translate&authuser=0&hl=en&lr=lang_en';
      }
      //loadFrame(location.href.split('?q=')[1]);

        </script>

  <style>
.google-translate-place {
    width: 256px;
    height: 144px;
    margin-left:-128px;
    position:absolute;
    left:144px;
    top:32px;
    display:none;
}
.google-translate-crop {
    width: 256px;
    height: 144px;
    overflow-y: scroll;
    overflow-x: scroll;
    position: absolute;
}
.google-translate {
    transform: scale(0.75);
    transform-origin: 180px 180px;
    position: relative;
    left: -180px; top: -180px;
    width: 2560px; height: 5120px;
    position: absolute;
}
  </style>

  </body>
</html>