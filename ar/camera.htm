<!-- Copyright 2021 Google LLC. All Rights Reserved.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================-->
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1.0, user-scalable=no">
  <style>body {
      margin: 0;
    }
    #main {
      margin: 0;
      position: relative;
    }
    #canvas-wrapper {
      position: relative;
    }
    canvas {
      position: absolute;
      top: 0;
      left: 0;
    }
    #top-bar {
      text-align: center;
      position: relative;
    }

video {
  margin-top: 2px;
  border: 1px solid black;
}

.button {
  cursor: pointer;
  display: block;
  width: 160px;
  border: 1px solid black;
  font-size: 16px;
  text-align: center;
  padding-top: 2px;
  padding-bottom: 4px;
  color: white;
  background-color: darkgreen;
  text-decoration: none;
}

.bottom {
  clear: both;
  padding-top: 10px;
}

        </style>
        
        <title>Recording a media element - example_of_recording_a_media_element - code sample</title>
        
    </head>
    <body>
<p>
  Click the "Start Recording" button to begin video recording for a few seconds.
  You can stop recording by clicking the "Stop Recording" button. The "Download"
  button will download the received data (although it's in a raw, unwrapped form
  that isn't very useful).
</p>
<br />

<div>
  <div id="startButton" class="button">Start Recording</div>
  <video id="preview" width="160" height="120" autoplay muted></video>
  <div id="stopButton" class="button">Stop Recording</div>
  <a id="downloadButton" class="button">Download</a>
</div>

  <div id="stats"></div>
  <div id="main">
    <div class="container">
      <div id="top-bar">
        <label for="videofile">Video:</label>
        <input type="file" id="videofile" name="video" accept="video/*">
        <button id="submit">Run</button>
      </div>
    </div>
    <div class="container" id="canvas-wrapper">
      <canvas id="output"></canvas>
      <video id="video" muted>
        <source id="currentVID" src="">
      </video>
    </div>
    <div class="container">
      <span id="status"></span>
    </div>
  </div>

<div class="bottom">
  <pre id="log"></pre>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.6/dat.gui.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/stats.js/r16/Stats.min.js"></script>
<script src="./src.a2b27638.js"></script>

<script>
//https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia

let preview = document.getElementById("preview");
let recording = document.getElementById("recording");
let startButton = document.getElementById("startButton");
let stopButton = document.getElementById("stopButton");
let downloadButton = document.getElementById("downloadButton");
let logElement = document.getElementById("log");

let recorder = null;
let recordingTimeMS = 1000;

function log(msg) {
  logElement.innerHTML += `${msg}\n`;
}

function wait(delayInMS) {
  return new Promise((resolve) => setTimeout(resolve, delayInMS));
}

function startRecording(stream, lengthInMS) {
  recorder = new MediaRecorder(stream);
  let data = [];

  recorder.ondataavailable = (event) => data.push(event.data);
  recorder.start();
  log(`${recorder.state} for ${lengthInMS / 1000} secondsâ€¦`);

  let stopped = new Promise((resolve, reject) => {
    recorder.onstop = resolve;
    recorder.onerror = (event) => reject(event.name);
  });

  let recorded = wait(lengthInMS).then(() => {
    stopButton.addEventListener(
      "click",
      () => {
        if (recorder.state === "recording") {
          recorder.stop();
        }
        stop(preview.srcObject);
      },
      false,
    );
  });

  return Promise.all([stopped, recorded]).then(() => data);
}

function stop(stream) {
  stream.getTracks().forEach((track) => track.stop());
}

startButton.addEventListener(
  "click",
  () => {
    navigator.mediaDevices
      .getUserMedia({
        video: {
	        facingMode: "user",
	        width: { ideal: 160 },
	        height: { ideal: 120 },
	        frameRate: { ideal: 25 }
	      },
        audio: false,
      })
      .then((stream) => {
        preview.srcObject = stream;
        return new Promise((resolve) => (preview.onplaying = resolve));
      })
      .then(() => startRecording(preview.srcObject, recordingTimeMS))
      .then((recordedChunks) => {
        let recordedBlob = new Blob(recordedChunks, { type: "video/mp4" });
        var url = URL.createObjectURL(recordedBlob);
        log(
          `Successfully recorded ${recordedBlob.size} bytes of ${recordedBlob.type} media.`,
        );
	      downloadButton.href = url;
        downloadButton.download = "RecordedVideo.mp4";
      })
      .catch((error) => {
        if (error.name === "NotFoundError") {
          log("Camera or microphone not found. Can't record.");
        } else {
          log(error);
        }
      });
  },
  false,
);
            </script>
    </body>
</html>
