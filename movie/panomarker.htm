<!DOCTYPE html>
<html>
  <head>
    <!-- Example code adapted from goo.gl/uEx309 -->
    <title>PanoMarker</title>
    <meta charset="utf-8">
    <style>
        #map, #trackpad {
          user-select: none;
          touch-action: none;
        }
        .active, .inactive {
          background-size: cover;
          margin-left: -20px;
          margin-top: -20px;
        }
        .active {
          opacity: 1.0;
        }
        .inactive {
          opacity: 0.5;
        }
        
.container {
  perspective: 200px;
  margin: 0px;
  padding: 0px;
}

.cube {
  position: relative;
  width: 40px;
  height: 40px;
  transform-style: preserve-3d;
}

.face {
  width: 40px;
  height: 40px;
  background: skyblue;
  border: 1px solid black;
  position: absolute;
  opacity: 0.5;
  display: flex;
  align-items: center;
  justify-content: center;
  font-family: monospace;
  font-size: 5em;
}

.front {
  transform: translateZ(20px);
}

.back {
  transform: translateZ(-20px) rotateY(180deg);
}

.left {
  transform: translateX(-20px) rotateY(-90deg);
}

.right {
  transform: translateX(20px) rotateY(90deg);
}

.top {
  transform: translateY(-20px) rotateX(90deg);
}

.bottom {
  transform: translateY(20px) rotateX(-90deg);
}

.cube {
  transform: rotate3d(1, 1, 1, 0deg);
}
    </style>
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
    <script src="./panomarker.js"></script>
    <script>

var AVAILABLE_PANORAMAS = {
  grid: {
    location: {
      pano: 'grid',
      description: 'A simple test grid',
      latLng: new google.maps.LatLng(50.5818747, 5.9815603)
    },
    links: [],
    copyright: 'Imagery (c) Martin Matysiak',
    tiles: {
      tileSize: new google.maps.Size(2000, 1000),
      worldSize: new google.maps.Size(2000, 1000),
      centerHeading: 0,
      getTileUrl: function() { return 'grid.png' }
    }
  },
  /*gileppe: {
    location: {
      pano: 'gileppe',
      description: 'Lac de la Gileppe',
      latLng: new google.maps.LatLng(50.5818747, 5.9815603)
    },
    links: [],
    copyright: 'Imagery (c) Martin Matysiak',
    tiles: {
      tileSize: new google.maps.Size(4000, 2000),
      worldSize: new google.maps.Size(4000, 2000),
      centerHeading: 0,
      getTileUrl: function() { return 'gileppe.jpg' }
    }
  }*/
};

function init() {
  try {
  var container = document.getElementById('map');
  var trackpad = document.getElementById('trackpad');
  var volume = document.getElementById('volume');

  var panorama = new google.maps.StreetViewPanorama(
    container,
    {
      pano: 'grid',
      pov: {heading: 47.11, pitch: -13.1},
      panoProvider: function(pano) { return AVAILABLE_PANORAMAS[pano]; }
    });

  var marker = new PanoMarker(
    {
      pano: panorama,
      container: container,
      position: {heading: 89.63, pitch: -27.22},
      anchor: new google.maps.Point(20,20),
      size: new google.maps.Size(40,40),
      icon: 'info.png',
      title: 'Click me!'
    });
  marker.setClassName('inactive');
  
  var cube = `<div class="container">
  <div class="cube">
    <div class="face top">T</div>
    <div class="face bottom">B</div>
    <div class="face left">L</div>
    <div class="face right">R</div>
    <div class="face front">âŒ¾</div>
    <div class="face back"> </div>
  </div>
</div>`;
  var sound = { heading: 0.0, pitch: 0.0, volume: 1.0, changing: false };
  
  google.maps.event.addListener(marker, 'add', function() {
    document.getElementsByClassName('inactive')[0].innerHTML = cube;
  });
  google.maps.event.addListener(marker, 'click', function() {
    if (sound.changing === false) {
      marker.setClassName('active');
      
      const mpos = marker.getPosition();
      trackpad.onpointermove = function(e) {
        const rect = e.target.getBoundingClientRect();
        sound.heading = e.clientX-rect.x-180;
        sound.pitch = 90-(e.clientY-rect.y);
        document.getElementsByClassName('cube')[0].style.transform = 'scale3d(' + sound.volume + ',' + sound.volume + ',' + sound.volume + ') rotate3d(0, 1, 0, ' + (sound.heading+panorama.getPov().heading-90) + 'deg) rotate3d(1, 0, 0, ' + (sound.pitch) + 'deg)';
      }
      trackpad.onpointerdown = trackpad.onpointermove;
      sound.changing = true;
    } else {
      marker.setClassName('inactive');
      
      trackpad.onpointermove = function(e) {
        const rect = e.target.getBoundingClientRect();
        marker.setPosition({
          heading: e.clientX-rect.x-180, 
          pitch: 90-(e.clientY-rect.y)
        });
      }
      trackpad.onpointerdown = trackpad.onpointermove;
      sound.changing = false;
    }
  });
  
  volume.oninput = function(e) {
    const size = e.target.value * 40;
    sound.volume = e.target.value;
    marker.setSize({ height: size, width: size });
    document.getElementsByClassName('cube')[0].style.transform = 'scale3d(' + sound.volume + ',' + sound.volume + ',' + sound.volume + ') rotate3d(0, 1, 0, ' + (sound.heading+panorama.getPov().heading-90) + 'deg) rotate3d(1, 0, 0, ' + (sound.pitch) + 'deg)';
    document.getElementsByClassName('container')[0].parentElement.style.marginTop = -sound.volume*20 + 'px';
    document.getElementsByClassName('container')[0].parentElement.style.marginLeft = -sound.volume*20 + 'px';
  }
  
  panorama.addListener("pov_changed", () => {
    document.getElementsByClassName('cube')[0].style.transform = 'scale3d(' + sound.volume + ',' + sound.volume + ',' + sound.volume + ') rotate3d(0, 1, 0, ' + (sound.heading+panorama.getPov().heading-90) + 'deg) rotate3d(1, 0, 0, ' + (sound.pitch) + 'deg)';
  });
  } catch(e) {alert(e);}
}

    </script>
  </head>
    <body onload="init()">
        <div id="map" style="width:620px; height:500px"></div>
        <div id="trackpad" style="background:url('./grid.png'); background-size: cover; width:360px; height:180px"></div>
        volume <input id="volume" type="range" value="1.0" max="2.0" min="0.5" step="0.001"/>
    </body>
</html>