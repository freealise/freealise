<html>

<head>
  <meta charset="utf-8" />
  <style>
    #result {
      font-size: 14px;
      font-family: monospace;
      color: #c0c0c0;
      width:99vw;
      white-space: pre-wrap;
      word-break: normal;
      overflow-wrap: break-word;
    }

    a {
      color: steelblue;
    }
    
    u {
      text-decoration: none;
    }
    
    .b {
      text-shadow: 0 0 0.5px black;
    }
    
    .bold {
      text-shadow: 0 0 0.5px black, 0 0 0.5px black; 
    }
    
    .bolder {
      text-shadow: 0 0 0.5px black, 0 0 0.5px black, 0 0 0.5px black; 
    }
    
    .boldest {
      text-shadow: 0 0 0.5px black, 0 0 0.5px black, 0 0 0.5px black, 0 0 0.5px black; 
    }
    
    .theboldest {
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div>compromise plugin demo</div>
  <div><a href="https://github.com/spencermountain/compromise/blob/master/demo/plugin.html">view source</a></div>
  <input type="file" id="fileElem" accept="*/*" style="display:none" />
  <button id="fileSelect">Upload</button><span id="fileList"></span>
  <div id="result"></div>
  
<script src="https://unpkg.com/compromise"></script>
<script src="../notes.js"></script>
<!-- <script src="../plugins/speech/builds/compromise-speech.cjs"></script> -->
<script src="./compromise-stats-0.1.1.min.js"></script>
<script>

const fileSelect = document.getElementById("fileSelect"),
fileElem = document.getElementById("fileElem"),
fileList = document.getElementById("fileList");

fileSelect.addEventListener(
  "click",
  (e) => {
    if (fileElem) {
      fileElem.click();
    }
  },
  false,
);
fileElem.addEventListener("change", handleFiles);

function handleFiles(e) {
  fileList.textContent = "";
  if (!e.target.files.length) {
    fileList.textContent = "No file selected!";
  } else {
    var reader  = new FileReader();
  
    reader.addEventListener("load", function () {
      txt = reader.result;
      alert('ok '+e.target.files[0].name);
      try{loadFile(txt, colors);}catch(e){alert(e);}
      e.target.value = null;
    }, false);
  
    reader.readAsText(e.target.files[0]);
  }
}

  // compromise is loaded as 'window.nlp'
  // plugin is loaded as 'window.compromiseStats'
    
  const mapping = {
    CC: 'Conjunction',
    CD: 'Cardinal',
    DT: 'Determiner',
    EX: 'Preposition', //Existential there
    FW: 'Expression',
    IN: 'Preposition',
    JJ: 'Adjective',
    JJR: 'Preposition',
    JJS: 'Superlative',
    MD: 'Modal',
    NN: 'Noun',
    NNS: 'Plural',
    NNP: 'Singular',
    NNPS: 'Plural',
    POS: 'Possessive',
    PRP: 'Pronoun',
    RB: 'Adverb',
    RBR: 'Comparative',
    RBS: 'Superlative',
    RP: 'PhrasalVerb',
    PDT: 'Determiner',
    SYM: 'Expression',
    TO: 'Conjunction',
    UH: 'Expression',
    VB: 'Verb',
    VBD: 'PastTense',
    VBG: 'Gerund',
    VBN: 'Participle', // past participle
    VBP: 'PresentTense', // non-3rd person singular present
    VBZ: 'PresentTense', // 3rd person singular present
    'PRP$': 'Pronoun',
    'WP$': 'Possessive',
    WDT: 'Determiner',
    WP: 'Pronoun',
    WRB: 'Adverb',
  };
  
  const colors = {
    Conjunction: '33',
    Cardinal: '50',
    Determiner: '33',
    Preposition: '33', //Existential there
    Expression: '33',
    Preposition: '33',
    Adjective: '50',
    Preposition: '50',
    Superlative: '50',
    Modal: '33',
    Noun: '100',
    Plural: '100',
    Singular: '100',
    Plural: '100',
    Possessive: '33',
    Pronoun: '33',
    Adverb: '33',
    Comparative: '33',
    Superlative: '33',
    PhrasalVerb: '67',
    Determiner: '33',
    Expression: '33',
    Conjunction: '33',
    Expression: '33',
    Verb: '67',
    PastTense: '67',
    Gerund: '67',
    Participle: '67', // past participle
    PresentTense: '67', // non-3rd person singular present
    PresentTense: '67', // 3rd person singular present
    Pronoun: '33',
    Possessive: '33',
    Determiner: '33',
    Pronoun: '33',
    Adverb: '33',
  };
  
  nlp.plugin(compromiseStats);
  
  //nlp.plugin(compromiseWikipedia);
  //var wiki = doc.wikipedia().json();

  function loadFile(txt, colors) {
    
    txt = txt.replace(/\</g,'≺').replace(/\>/g,'≻');
    var doc = nlp(txt);
    alert('ok');
    //doc.compute('syllables')
    //doc.compute('penn'); //t.penn
  
    //doc.tfidf();
    //let model = doc;
    var tfidf = doc.compute('tfidf').json();
    //document.write(JSON.stringify(tfidf));
      
    //let out = "";
    //let arr = wiki.map(t=>t.text);
    alert(JSON.stringify(doc.json()[0].terms[0]).chunk);
    
    for (var j=0; j<doc.json().length; j++) {
      let arr = doc.json()[j].terms.map(t=>[t.text, t.chunk, t.tfidf]); //doc.syllables()
    
      for (var i=0; i<arr.length; i++) {
        /*if (arr[i] && arr[i]!='') {
          var p = txt.indexOf(arr[i]);
          txt = txt.substr(0, p) + "<b>"+arr[i].toUpperCase()+"</b>" + txt.substr(p+arr[i].length);
        }*/
        if (colors[arr[i][1]]) {
          arr[i][1] = colors[arr[i][1]];
        } else {
          arr[i][1] = '50';
        }
        if (arr[i][0]!='' && arr[i][0].length>1 && arr[i][0].search(/\d/)==-1) {
          var p = txt.indexOf(arr[i][0]);
          if (txt.charAt(p-1).search(/\w/)==-1 && txt.charAt(p+arr[i][0].length).search(/\w/)==-1) {
            //document.write(p+' ');
            var b = txt.substr(0,p);
            var d = txt.substr(p+arr[i][0].length);
            txt = b + "<U STYLE=\"COLOR:HSLA(0,0%,"+(100-arr[i][1])+"%,"+(0.5/arr[i][2]+0.5)+");\">" + arr[i][0].split("").join("&#847;") + "</U>" + d;
          }
        }
      }
      //out += "\n";
    }
    let el = document.getElementById('result');
    el.innerHTML = txt; //JSON.stringify(wiki, null, 2); //out;
  }
  
  window.onload = loadFile(txt, colors);
  
</script>
</body>
</html>